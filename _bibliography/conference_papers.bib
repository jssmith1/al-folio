@inproceedings{McNamara:2018:ACE:3236024.3264833,
 author = {McNamara, Andrew and Smith, Justin and Murphy-Hill, Emerson},
 title = {Does ACM's Code of Ethics Change Ethical Decision Making in Software Development?},
 booktitle = {Proceedings of the 2018 26th ACM Joint Meeting on European Software Engineering Conference and Symposium on the Foundations of Software Engineering},
 series = {ESEC/FSE 2018},
 year = {2018},
 isbn = {978-1-4503-5573-5},
 location = {Lake Buena Vista, FL, USA},
 pages = {729--733},
 numpages = {5},
 url = {http://doi.acm.org/10.1145/3236024.3264833},
 doi = {10.1145/3236024.3264833},
 acmid = {3264833},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {ACM code of ethics, software engineering},
 abstract = {Ethical decisions in software development can substantially impact end-users, organizations, and our environment, as is evidenced by recent ethics scandals in the news. Organizations, like the ACM, publish codes of ethics to guide software-related ethical decisions. In fact, the ACM has recently demonstrated renewed interest in its code of ethics and made updates for the first time since 1992. To better understand how the ACM code of ethics changes software-related decisions, we replicated a prior behavioral ethics study with 63 software engineering students and 105 professional software developers, measuring their responses to 11 ethical vignettes. We found that explicitly instructing participants to consider the ACM code of ethics in their decision making had no observed effect when compared with a control group. Our findings suggest a challenge to the research community: if not a code of ethics, what techniques can improve ethical decision making in software engineering?},
 pdf = {FSE18_NIER.pdf}
} 


@inproceedings{barik2015fuse,
  title={FUSE: A Reproducible, Extendable, Internet-Scale Corpus of Spreadsheets},
  author={Barik, Titus and Lubick, Kevin and Smith, Justin and Slankas, John and Murphy-Hill, Emerson},
  booktitle={Proceedings of the 12th Working Conference on Mining Software Repositories},
  pages={486--489},
  year={2015},
  organization={IEEE Press},
  pdf={MSR15_FUSE.pdf},
  abstract={Spreadsheets are perhaps the most ubiquitous form of end-user programming software. This paper describes a corpus, called Fuse, containing 2,127,284 URLs that return spreadsheets (and their HTTP server responses), and 249,376 unique spreadsheets, contained within a public web archive of over 26.83 billion pages. Obtained using nearly 60,000 hours of computation, the resulting corpus exhibits several useful properties over prior spreadsheet corpora, including reproducibility and extendability. Our corpus is unencumbered by any license agreements, available to all, and intended for wide usage by end-user software engineering researchers. In this paper, we detail the data and the spreadsheet extraction process, describe the data schema, and discuss the trade-offs of Fuse with other corpora.}
}

@inproceedings{thomas2015study,
  title={A Study of Interactive Code Annotation for Access Control Vulnerabilities},
  author={Thomas, Tyler and Chu, Bill and Lipford, Heather and Smith, Justin and Murphy-Hill, Emerson},
  booktitle={Visual Languages and Human-Centric Computing (VL/HCC), 2015 IEEE Symposium on},
  pages={73--77},
  year={2015},
  organization={IEEE},
  pdf={VLHCC_2015_ASIDE.pdf},
  abstract={While there are a variety of existing tools to help detect security vulnerabilities in code, they are seldom used by developers due to the time or security expertise required. We are investigating techniques integrated within the IDE to help developers detect and mitigate security vulnerabilities. In this paper, we examine using interactive annotation for access control vulnerabilities. We evaluated whether developers could indicate access control logic using interactive annotation and understand the vulnerabilities reported as a result. Our study indicates that developers can easily find and annotate access control logic but can struggle to use our tool to trace the cause of the vulnerability. Our results provide design guidance for improving the interaction and communication of such security tools with developers.}
}


@inproceedings{johnson2016cross,
  title={A Cross-Tool Communication Study on Program Analysis Tool Notifications},
  author={Johnson, Brittany and Pandita, Rahul and Smith, Justin and Ford, Denae and Elder, Sarah and Murphy-Hill, Emerson and Heckman, Sarah and Sadowski, Caitlin},
  booktitle={Proceedings of the 2016 24th ACM SIGSOFT International Symposium on Foundations of Software Engineering},
  pages={73--84},
  year={2016},
  organization={ACM},
  pdf={FSE16_Tool.pdf},
  abstract={Program analysis tools use notifications to communicate with developers, but previous research suggests that developers encounter challenges that impede this communication. This paper describes a qualitative study that identifies 10 kinds of challenges that cause notifications to miscommunicate with developers. Our resulting notification communication theory reveals that many challenges span multiple tools and multiple levels of developer experience. Our results suggest that, for example, future tools that model developer experience could improve communication and help developers build more accurate mental models.}
}

@inproceedings{ford2016paradise,
  title={Paradise Unplugged: Identifying Barriers for Female Participation on Stack Overflow},
  author={Ford, Denae and Smith, Justin and Guo, Philip J and Parnin, Chris},
  booktitle={Proceedings of the 2016 24th ACM SIGSOFT International Symposium on Foundations of Software Engineering},
  pages={846--857},
  year={2016},
  organization={ACM},
  pdf={FSE16_SO.pdf},
  abstract={It is no secret that females engage less in programming fields than males. However, in online communities, such as Stack Overflow, this gender gap is even more extreme: only 5.8% of contributors are female. In this paper, we use a mixed-methods approach to identify contribution barriers females face in online communities. Through 22 semi-structured interviews with a spectrum of female users ranging from non-contributors to a top 100 ranked user of all time, we identified 14 barriers preventing them from contributing to Stack Overflow. We then conducted a survey with 1470 female and male developers to confirm which barriers are gender related or general problems for everyone. Females ranked five barriers significantly higher than males. A few of these include doubts in the level of expertise needed to contribute, feeling overwhelmed when competing with a large number of users, and limited awareness of site features. Still, there were other barriers that equally impacted all Stack Overflow users or affected particular groups, such as industry programmers. Finally, we describe several implications that may encourage increased participation in the Stack Overflow community across genders and other demographics.}
}

@inproceedings{do2017just,
  title={Just-in-Time Static Analysis},
  author={Do, Lisa Nguyen Quang and Ali, Karim and Livshits, Benjamin and Bodden, Eric and Smith, Justin and Murphy-Hill, Emerson},
  booktitle={Proceedings of the 26th ACM SIGSOFT International Symposium on Software Testing and Analysis},
  pages={307--317},
  year={2017},
  organization={ACM},
  pdf={ISSTA17_JIT.pdf},
  abstract={We present the concept of Just-In-Time (JIT) static analysis that interleaves code development and bug fixing in an integrated development environment. Unlike traditional batch-style analysis tools, a JIT analysis tool presents warnings to code developers over time, providing the most relevant results quickly, and computing less relevant results incrementally later. In this paper, we describe general guidelines for designing JIT analyses. We also present a general recipe for transforming static data-flow analyses to JIT analyses through a concept of layered analysis execution. We illustrate this transformation through CHEETAH, a JIT taint analysis for Android applications. Our empirical evaluation of CHEETAH on real-world applications shows that our approach returns warnings quickly enough to avoid disrupting the normal workflow of developers. This result is confirmed by our user study, in which developers fixed data leaks twice as fast when using CHEETAH compared to an equivalent batch-style analysis.}
}

@inproceedings{barik2017developers,
  title={Do Developers Read Compiler Error Messages?},
  author={Barik, Titus and Smith, Justin and Lubick, Kevin and Holmes, Elisabeth and Feng, Jing and Murphy-Hill, Emerson and Parnin, Chris},
  booktitle={Proceedings of the 39th International Conference on Software Engineering},
  pages={575--585},
  year={2017},
  organization={IEEE Press},
  pdf={ICSE_2017_EYE.pdf},
  abstract={In integrated development environments, developers receive compiler error messages through a variety of textual and visual mechanisms, such as popups and wavy red underlines. Although error messages are the primary means of communicating defects to developers, researchers have a limited understanding on how developers actually use these messages to resolve defects. To understand how developers use error messages, we conducted an eye tracking study with 56 participants from undergraduate and graduate software engineering courses at our university. The participants attempted to resolve common, yet problematic defects in a Java code base within the Eclipse development environment. We found that: 1) participants read error messages and the difficulty of reading these messages is comparable to the difficulty of reading source code, 2) difficulty reading error messages significantly predicts participants' task performance, and 3) participants allocate a substantial portion of their total task to reading error messages (13%--25%). The results of our study offer empirical justification for the need to improve compiler error messages for developers.}
}

@inproceedings{smith2017flower,
  title={Flower: Navigating Program Flow in the IDE},
  author={Smith, Justin and Brown, Chris and Murphy-Hill, Emerson},
  booktitle={Visual Languages and Human-Centric Computing (VL/HCC)},
  year={2017},
  pdf={VLHCC17_Flower.pdf},
  abstract={Program navigation is a critical task for software developers. State-of-the-art tools have been shown to support effective program navigation strategies, and do so by adding widgets, secondary views, and visualizations to the screen. In this work, we build on prior work by exploring what types of navigation can be supported with relatively few interface elements. To that end, we designed and implemented a prototype tool, named Flower, that supports structural program navigation while maintaining a minimalistic interface. Flower enables developers to simultaneously navigate control flow and data flow within the Eclipse Integrated Development Environment. Based on a preliminary evaluation with eight programmers, Flower succeeds when call graphs contained relatively few branches, but was strained by complex program structures.}
}

@inproceedings{smith2017spreadsheet,
  title={Spreadsheet Practices and Challenges in a Large Multinational Conglomerate},
  author={Smith, Justin and Middleton, Justin A. and Kraft, Nicholas A.},
  booktitle={Visual Languages and Human-Centric Computing (VL/HCC)},
  year={2017},
  pdf={VLHCC17_Spreadsheets.pdf},
  abstract={Spreadsheets are ubiquitous. Thus, it is important to understand the challenges faced by spreadsheet users in practice. To better understand these challenges, we surveyed ABB employees and then interviewed a cross-section of survey respondents. We used a two-phase coding process to classify the challenges they described. Our survey findings demonstrate that practices in our single-company setting are consistent with practices in broader settings. Our interviews revealed both individual and organizational challenges. For instance, individual participants described data pipeline challenges related to importing data from external sources or storing and archiving spreadsheet data. Further, participants' collective responses revealed challenges pertaining to knowledge distribution within the organization. We outline possible interventions to address these challenges. Our results will help guide researchers and tool designers in addressing the practical challenges facing spreadsheet users.}
}

@inproceedings{smith2015questions,
  title={Questions Developers Ask While Diagnosing Potential Security Vulnerabilities with Static Analysis},
  author={Smith, Justin and Johnson, Brittany and Murphy-Hill, Emerson and Chu, Bill and Lipford, Heather Richter},
  booktitle={Proceedings of the 2015 10th Joint Meeting on Foundations of Software Engineering},
  pages={248--259},
  year={2015},
  organization={ACM},
  pdf={FSE15_QUESTION.pdf},
  abstract={Security tools can help developers answer questions about potential vulnerabilities in their code. A better understanding of the types of questions asked by developers may help toolsmiths design more effective tools. In this paper, we describe how we collected and categorized these questions by conducting an exploratory study with novice and experienced software developers. We equipped them with Find Security Bugs, a security-oriented static analysis tool, and observed their interactions with security vulnerabilities in an open-source system that they had previously contributed to. We found that they asked questions not only about security vulnerabilities, associated attacks, and fixes, but also questions about the software itself, the social ecosystem that built the software, and related resources and tools. For example, when participants asked questions about the source of tainted data, their tools forced them to make imperfect tradeoffs between systematic and ad hoc program navigation strategies.}
}

