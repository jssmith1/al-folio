@inproceedings{smith2016resolving,
  title={Resolving Input Validation Vulnerabilities by Retracing Taint Flow Through Source Code},
  author={Smith, Justin},
  booktitle={Visual Languages and Human-Centric Computing (VL/HCC), 2016 IEEE Symposium on},
  pages={252--253},
  year={2016},
  organization={IEEE},
  pdf={VLHCC16_GC.pdf},
  abstract={Various security-oriented static analysis tools are designed to detect potential input validation vulnerabilities early in the development process. To verify and resolve these vulnerabilities, developers must retrace problematic data flows through the source code. My thesis proposes that existing tools do not adequately support the navigation of these traces. In this work I will explore the strategies developers use to navigate tainted data flow in source code and work toward solutions that support successful strategies.}
}

@inproceedings{do2017cheetah,
  title={Cheetah: Just-in-Time Taint Analysis for Android Apps},
  author={Do, Lisa Nguyen Quang and Ali, Karim and Livshits, Benjamin and Bodden, Eric and Smith, Justin and Murphy-Hill, Emerson},
  booktitle={Software Engineering Companion (ICSE-C), 2017 IEEE/ACM 39th International Conference on},
  pages={39--42},
  year={2017},
  organization={IEEE},
  pdf={ICSE17_demo},
  abstract={Current static-analysis tools are often long-running, which causes them to be sidelined into nightly build checks. As a result, developers rarely use such tools to detect bugs when writing code, because they disrupt their workflow. In this paper, we present Cheetah, a static taint analysis tool for Android apps that interleaves bug fixing and code development in the Eclipse integrated development environment. Cheetah is based on the novel concept of Just-in-Time static analysis that discovers and reports the most relevant results to the developer fast, and computes the more complex results incrementally later. Unlike traditional batch-style static-analysis tools, Cheetah causes minimal disruption to the developer's workflow. This video demo showcases the main features of Cheetah: https://www.youtube.com/watch?v=i_KQD-GTBdA.}
}

@inproceedings{smith2016identifying,
  title={Identifying Successful Strategies for Resolving Static Analysis Notifications},
  author={Smith, Justin},
  booktitle={Proceedings of the 38th International Conference on Software Engineering Companion},
  pages={662--664},
  year={2016},
  organization={ACM},
  pdf={ICSE16_SRC.pdf},
  abstract={Although static analysis tools detect potential code defects early in the development process, they do not fully support developers in resolving those defects. To accurately and efficiently resolve defects, developers must orchestrate several complex tasks, such as determining whether the defect is a false positive and updating the source code without introducing new defects. Without good defect resolution strategies developers may resolve defects erroneously or inefficiently. In this work, I perform a preliminary analysis of the successful and unsuccessful strategies developers use to resolve defects. Based on the successful strategies identified, I then outline a tool to support developers throughout the defect resolution process.}
}

@inproceedings{smith2018strat, 
  author={J. Smith}, 
  booktitle={2018 IEEE Symposium on Visual Languages and Human-Centric Computing (VL/HCC)}, 
  title={Supporting Effective Strategies for Resolving Vulnerabilities Reported by Static Analysis Tools}, 
  year={2018}, 
  volume={}, 
  number={}, 
  pages={267-268}, 
  abstract={Static analysis tools detect potentially costly security defects early in the software development process. However, these defects can be difficult for developers to accurately and efficiently resolve. The goal of this work is to understand the vulnerability resolution process so that we can build tools that support more effective strategies for resolving vulnerabilities. In this work, I study developers as they resolve security vulnerabilities to identify their information needs and current strategies. Next, I study existing tools to understand how they support developers' strategies. Finally, I plan to demonstrate how strategy-aware tools can help developers resolve security vulnerabilities more accurately and efficiently.}, 
  keywords={program diagnostics;security of data;software tools;static analysis tools;software development process;vulnerability resolution process;security vulnerabilities;strategy-aware tools;security defects;Tools;Security;Static analysis;Usability;Software engineering;Privacy}, 
  doi={10.1109/VLHCC.2018.8506525}, 
  ISSN={1943-6106}, 
  month={Oct},
  pdf={VLHCC18_GC.pdf}
}